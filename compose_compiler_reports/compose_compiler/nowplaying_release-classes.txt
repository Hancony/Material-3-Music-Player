stable class NotPlaying {
}
stable class Playing {
  stable val song: Song
  stable val playbackState: PlayerState
  stable val repeatMode: RepeatMode
  stable val isShuffleOn: Boolean
}
unstable class QueueViewModel {
  unstable val playlistsRepository: PlaylistsRepository
  unstable val playbackManager: PlaybackManager
  unstable val queueScreenState: StateFlow<QueueScreenState>
  <runtime stability> = Unstable
}
stable class Loaded {
  stable val songs: List<Song>
  stable val currentSongIndex: Int
  <runtime stability> = 
}
stable class Loading {
  <runtime stability> = Stable
}
unstable class ReorderableList {
  stable val items: MutableState<MutableList<T>>
  stable val updateOrderCallback: Function2<@[ParameterName(name = 'from')] Int, @[ParameterName(name = 'to')] Int, Unit>
  stable var isDragging: Boolean
  stable var startDragIndex: Int
  stable var endDragIndex: Int
  <runtime stability> = Unstable
}
unstable class PlaybackSpeedViewModel {
  unstable val playbackManager: PlaybackManager
  <runtime stability> = Unstable
}
unstable class SleepTimerViewModel {
  unstable val playbackManager: PlaybackManager
  <runtime stability> = Unstable
}
unstable class NowPlayingViewModel {
  unstable val playbackManager: PlaybackManager
  unstable val _state: StateFlow<NowPlayingState>
  <runtime stability> = Unstable
}
